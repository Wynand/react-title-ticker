{"version":3,"sources":["title-ticker.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TitleTicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","offset","step","_this2","setState","timer","window","setInterval","clearInterval","ReactDOM","createPortal","react_default","a","createElement","Fragment","Arr","rot","r","length","slice","rotateArr","document","getElementsByTagName","React","Component","App","className","src","logo","alt","href","target","rel","title_ticker","Boolean","location","hostname","match","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mPAgCeA,cAtBX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,MAAOT,EAAMS,MAAOC,OAAQ,EAAGC,KAAMX,EAAMW,MAF3CV,mFAKC,IAAAW,EAAAR,KACfA,KAAKS,SAAS,CAACC,MAAMC,OAAOC,YAAY,kBAAIJ,EAAKC,SAAS,CAACH,OAAOE,EAAKJ,MAAME,OAAO,KAAIN,KAAKI,MAAMG,uDAInGI,OAAOE,cAAcb,KAAKI,MAAMM,wCAIhC,OAAOI,IAASC,aACZC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KAtBZ,SAAmBC,EAAIC,GACnB,IACIC,EAAID,EADED,EAAIG,OAEd,OAAOH,EAAII,MAAMF,GAAKF,EAAII,MAAM,EAAEF,GAoBrBG,CAAUzB,KAAKI,MAAMC,MAAML,KAAKI,MAAME,SAE9CoB,SAASC,qBAAqB,SAAS,WAnBtBC,IAAMC,WCoBjBC,mLAtBX,OACEd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAAA,UAAQa,UAAU,cAChBf,EAAAC,EAAAC,cAAA,OAAKc,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzClB,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEa,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQArB,EAAAC,EAAAC,cAACoB,EAAD,CAAajC,MAAQ,4BAA4BE,KAAQ,eAjBjDsB,aCOEU,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZN5B,IAAS6B,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASlB,SAASmB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.8625e2e5.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom'\n\nfunction rotateArr(Arr,rot){\n    let len = Arr.length;\n    let r = rot % len;\n    return Arr.slice(r) + Arr.slice(0,r);\n}\n\nclass TitleTicker extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {title: props.title, offset: 0, step: props.step}\n    }\n\n    componentDidMount(){\n        this.setState({timer:window.setInterval(()=>this.setState({offset:this.state.offset+1}),this.state.step)});\n    }\n\n    componentWillUnmount(){\n        window.clearInterval(this.state.timer);\n    }\n\n    render(){\n        return ReactDOM.createPortal(\n            <React.Fragment>\n                {rotateArr(this.state.title,this.state.offset)}\n            </React.Fragment>\n        ,document.getElementsByTagName(\"title\")[0]);\n    }\n}\n\nexport default TitleTicker;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TitleTicker from './title-ticker';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <TitleTicker title = \"Mary had a little lamb - \" step = {1000}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}